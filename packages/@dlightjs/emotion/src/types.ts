import type { Typed, Prop, RequiredProp, UnTyped, UnPropWrapper, DLightHTMLAttributesFunc } from "@dlightjs/types"

type PropWrapper<T> = {
  [key in keyof T]-?: undefined extends T[key] ? Prop<T[key]> : RequiredProp<T[key]>;
}

type StyledCustomReturn<T, G> = Typed<PropWrapper<T & UnPropWrapper<UnTyped<G>>>>

// @ts-ignore
type StyledHTMLReturn<T, G> = (innerText?: string | number) => DLightHTMLAttributesFunc<G, T>

type StyledReturn<T, G> = G extends string ? StyledHTMLReturn<T, G> : StyledCustomReturn<T, G>

type StyledCustom = (<G>(innerTag: G) => <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledReturn<T, G>)

interface StyledHTML {
  a: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLAnchorElement, "a">
  abbr: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "abbr">
  address: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "address">
  area: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLAreaElement, "area">
  article: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "article">
  aside: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "aside">
  audio: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLAudioElement, "audio">
  b: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "b">
  base: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLBaseElement, "base">
  bdi: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "bdi">
  bdo: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "bdo">
  blockquote: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLQuoteElement, "blockquote">
  body: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLBodyElement, "body">
  br: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLBRElement, "br">
  button: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLButtonElement, "button">
  canvas: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLCanvasElement, "canvas">
  caption: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableCaptionElement, "caption">
  cite: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "cite">
  code: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "code">
  col: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableColElement, "col">
  colgroup: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableColElement, "colgroup">
  data: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDataElement, "data">
  datalist: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDataListElement, "datalist">
  dd: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "dd">
  del: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLModElement, "del">
  details: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDetailsElement, "details">
  dfn: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "dfn">
  dialog: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDialogElement, "dialog">
  div: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDivElement, "div">
  dl: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDListElement, "dl">
  dt: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "dt">
  em: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "em">
  embed: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLEmbedElement, "embed">
  fieldset: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLFieldSetElement, "fieldset">
  figcaption: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "figcaption">
  figure: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "figure">
  footer: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "footer">
  form: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLFormElement, "form">
  h1: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h1">
  h2: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h2">
  h3: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h3">
  h4: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h4">
  h5: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h5">
  h6: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadingElement, "h6">
  head: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHeadElement, "head">
  header: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "header">
  hgroup: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "hgroup">
  hr: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHRElement, "hr">
  html: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLHtmlElement, "html">
  i: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "i">
  iframe: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLIFrameElement, "iframe">
  img: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLImageElement, "img">
  input: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLInputElement, "input">
  ins: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLModElement, "ins">
  kbd: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "kbd">
  label: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLLabelElement, "label">
  legend: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLLegendElement, "legend">
  li: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLLIElement, "li">
  link: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLLinkElement, "link">
  main: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "main">
  map: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLMapElement, "map">
  mark: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "mark">
  menu: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLMenuElement, "menu">
  meta: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLMetaElement, "meta">
  meter: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLMeterElement, "meter">
  nav: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "nav">
  noscript: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "noscript">
  object: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLObjectElement, "object">
  ol: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLOListElement, "ol">
  optgroup: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLOptGroupElement, "optgroup">
  option: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLOptionElement, "option">
  output: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLOutputElement, "output">
  p: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLParagraphElement, "p">
  picture: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLPictureElement, "picture">
  pre: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLPreElement, "pre">
  progress: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLProgressElement, "progress">
  q: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLQuoteElement, "q">
  rp: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "rp">
  rt: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "rt">
  ruby: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "ruby">
  s: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "s">
  samp: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "samp">
  script: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLScriptElement, "script">
  section: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "section">
  select: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLSelectElement, "select">
  slot: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLSlotElement, "slot">
  small: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "small">
  source: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLSourceElement, "source">
  span: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLSpanElement, "span">
  strong: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "strong">
  style: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLStyleElement, "style">
  sub: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "sub">
  summary: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "summary">
  sup: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "sup">
  table: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableElement, "table">
  tbody: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableSectionElement, "tbody">
  td: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableCellElement, "td">
  template: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTemplateElement, "template">
  textarea: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTextAreaElement, "textarea">
  tfoot: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableSectionElement, "tfoot">
  th: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableCellElement, "th">
  thead: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableSectionElement, "thead">
  time: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTimeElement, "time">
  title: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTitleElement, "title">
  tr: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTableRowElement, "tr">
  track: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLTrackElement, "track">
  u: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "u">
  ul: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUListElement, "ul">
  var: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "var">
  video: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLVideoElement, "video">
  wbr: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "wbr">
  acronym: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "acronym">
  applet: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "applet">
  basefont: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "basefont">
  bgsound: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "bgsound">
  big: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "big">
  blink: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "blink">
  center: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "center">
  dir: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLDirectoryElement, "dir">
  font: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLFontElement, "font">
  frame: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLFrameElement, "frame">
  frameset: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLFrameSetElement, "frameset">
  isindex: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "isindex">
  keygen: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "keygen">
  listing: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLPreElement, "listing">
  marquee: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLMarqueeElement, "marquee">
  menuitem: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "menuitem">
  multicol: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "multicol">
  nextid: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "nextid">
  nobr: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "nobr">
  noembed: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "noembed">
  noframes: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "noframes">
  param: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLParamElement, "param">
  plaintext: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "plaintext">
  rb: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "rb">
  rtc: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "rtc">
  spacer: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLUnknownElement, "spacer">
  strike: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "strike">
  tt: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLElement, "tt">
  xmp: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<HTMLPreElement, "xmp">
  animate: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGAnimateElement, "animate">
  animateMotion: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGAnimateMotionElement, "animateMotion">
  animateTransform: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGAnimateTransformElement, "animateTransform">
  circle: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGCircleElement, "circle">
  clipPath: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGClipPathElement, "clipPath">
  defs: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGDefsElement, "defs">
  desc: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGDescElement, "desc">
  ellipse: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGEllipseElement, "ellipse">
  feBlend: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEBlendElement, "feBlend">
  feColorMatrix: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEColorMatrixElement, "feColorMatrix">
  feComponentTransfer: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEComponentTransferElement, "feComponentTransfer">
  feComposite: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFECompositeElement, "feComposite">
  feConvolveMatrix: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEConvolveMatrixElement, "feConvolveMatrix">
  feDiffuseLighting: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEDiffuseLightingElement, "feDiffuseLighting">
  feDisplacementMap: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEDisplacementMapElement, "feDisplacementMap">
  feDistantLight: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEDistantLightElement, "feDistantLight">
  feDropShadow: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEDropShadowElement, "feDropShadow">
  feFlood: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEFloodElement, "feFlood">
  feFuncA: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEFuncAElement, "feFuncA">
  feFuncB: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEFuncBElement, "feFuncB">
  feFuncG: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEFuncGElement, "feFuncG">
  feFuncR: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEFuncRElement, "feFuncR">
  feGaussianBlur: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEGaussianBlurElement, "feGaussianBlur">
  feImage: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEImageElement, "feImage">
  feMerge: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEMergeElement, "feMerge">
  feMergeNode: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEMergeNodeElement, "feMergeNode">
  feMorphology: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEMorphologyElement, "feMorphology">
  feOffset: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEOffsetElement, "feOffset">
  fePointLight: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFEPointLightElement, "fePointLight">
  feSpecularLighting: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFESpecularLightingElement, "feSpecularLighting">
  feSpotLight: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFESpotLightElement, "feSpotLight">
  feTile: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFETileElement, "feTile">
  feTurbulence: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFETurbulenceElement, "feTurbulence">
  filter: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGFilterElement, "filter">
  foreignObject: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGForeignObjectElement, "foreignObject">
  g: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGGElement, "g">
  image: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGImageElement, "image">
  line: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGLineElement, "line">
  linearGradient: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGLinearGradientElement, "linearGradient">
  marker: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGMarkerElement, "marker">
  mask: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGMaskElement, "mask">
  metadata: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGMetadataElement, "metadata">
  mpath: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGMPathElement, "mpath">
  path: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGPathElement, "path">
  pattern: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGPatternElement, "pattern">
  polygon: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGPolygonElement, "polygon">
  polyline: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGPolylineElement, "polyline">
  radialGradient: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGRadialGradientElement, "radialGradient">
  rect: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGRectElement, "rect">
  set: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGSetElement, "set">
  stop: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGStopElement, "stop">
  svg: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGSVGElement, "svg">
  switch: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGSwitchElement, "switch">
  symbol: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGSymbolElement, "symbol">
  text: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGTextElement, "text">
  textPath: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGTextPathElement, "textPath">
  tspan: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGTSpanElement, "tspan">
  use: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGUseElement, "use">
  view: <T = {}>(strings: any, ...args: Array<(props: T) => string>) => StyledHTMLReturn<SVGViewElement, "view">
}

export type Styled = StyledCustom & StyledHTML
